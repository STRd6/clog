// Generated by CoffeeScript 1.6.2
(function() {
  var BLANK_LINES, analyzeClass, churn, countNodes, eachExpression, eachProperty, exec, fs, getMethods, getNode, glob, merge, methods, nodes, objectLiteralMethods, readFile, spawn, _ref,
    _this = this;

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  nodes = require('coffee-script').nodes;

  fs = require('fs');

  glob = require('glob');

  BLANK_LINES = /^\s*$[\n\r]{1,}/gm;

  merge = function(object, properties) {
    var key, val;

    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };

  objectLiteralMethods = function(objectsArray) {
    var methods;

    methods = {};
    objectsArray.forEach(function(obj, index) {
      var methodLength, methodName;

      methodName = obj.variable.base.value;
      if (index === objectsArray.length - 1) {
        methodLength = obj.locationData.last_line - obj.locationData.first_line;
      } else {
        methodLength = (obj.locationData.last_line - obj.locationData.first_line) - 1;
      }
      return methods[methodName] = methodLength;
    });
    return methods;
  };

  analyzeClass = function(node) {
    var objects;

    objects = node.expressions[0].body.expressions[0].base.objects;
    return objectLiteralMethods(objects);
  };

  eachExpression = function(node, cb) {
    return node.expressions.forEach(cb);
  };

  eachProperty = function(node, cb) {
    return node.properties.forEach(cb);
  };

  getMethods = function(node, output) {
    if (output == null) {
      output = {};
    }
    eachExpression(node, function(exp) {
      var body, end, methods, objects, start, _ref1, _ref2, _ref3, _ref4, _ref5;

      if (exp.params != null) {
        start = exp.locationData.first_line;
        end = exp.locationData.last_line;
        output["anonymous"] || (output["anonymous"] = []);
        output["anonymous"].push(end - start);
      }
      if (((_ref1 = exp.value) != null ? _ref1.params : void 0) != null) {
        start = exp.value.locationData.first_line;
        end = exp.value.locationData.last_line;
        output[exp.variable.base.value] = end - start;
      }
      if ((objects = (_ref2 = exp.value) != null ? (_ref3 = _ref2.base) != null ? _ref3.objects : void 0 : void 0)) {
        methods = objectLiteralMethods(objects);
        merge(output, methods);
      }
      if ((_ref4 = exp.body) != null ? _ref4.classBody : void 0) {
        methods = analyzeClass(node);
        merge(output, methods);
      }
      if ((body = (_ref5 = exp.value) != null ? _ref5.body : void 0) != null) {
        return getMethods(body, output);
      }
    });
    return output;
  };

  readFile = function(path) {
    return fs.readFileSync(path, 'utf8').replace(BLANK_LINES, '');
  };

  methods = function(filePath) {
    var file;

    file = readFile(filePath);
    return getMethods(nodes(file));
  };

  /*
  metric: churn
  
  a metric that indicates how many times a
  particular file has been changed. The more
  it has been changed, the better it's a
  candidate for refactoring since it probably
  does too many things
  */


  churn = function(filePath, cb) {
    return exec("git whatchanged " + filePath + " | grep 'commit' | wc -l", cb);
  };

  /*
  metric: count nodes
  
  Simple proxy for complexity. The higher
  the number of nodes a file has, the more
  complex it is
  */


  getNode = function(node, totalNodes) {
    if (totalNodes == null) {
      totalNodes = 0;
    }
    node.expressions.forEach(function(n) {
      var body, _ref1;

      totalNodes += 1;
      if ((body = (_ref1 = n.value) != null ? _ref1.body : void 0) != null) {
        return getNode(body, totalNodes);
      }
    });
    return totalNodes;
  };

  countNodes = function(filePath) {
    var file;

    file = readFile(filePath);
    return getNode(nodes(file));
  };

  exports.clog = {
    churn: churn,
    countNodes: countNodes,
    methods: methods,
    run: function() {
      return glob('**/*.coffee', function(err, files) {
        return files.forEach(function(file) {
          return churn(file, function(err, output) {
            return console.log(output);
          });
        });
      });
    }
  };

}).call(this);
