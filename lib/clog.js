// Generated by CoffeeScript 1.6.2
(function() {
  var BLANK_LINES, analyzeClass, anonymousId, churn, countNodes, eachExpression, eachProperty, exec, fs, getMethods, getNode, glob, methods, nodes, objectLiteralMethods, spawn, _ref,
    _this = this;

  _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

  nodes = require('coffee-script').nodes;

  fs = require('fs');

  glob = require('glob');

  BLANK_LINES = /^\s*$[\n\r]{1,}/gm;

  anonymousId = 0;

  objectLiteralMethods = function(objectsArray) {
    var methods;

    methods = {};
    objectsArray.forEach(function(obj, index) {
      var methodLength, methodName;

      methodName = obj.variable.base.value;
      if (index === objectsArray.length - 1) {
        methodLength = obj.locationData.last_line - obj.locationData.first_line;
      } else {
        methodLength = (obj.locationData.last_line - obj.locationData.first_line) - 1;
      }
      return methods[methodName] = methodLength;
    });
    return methods;
  };

  analyzeClass = function(node) {
    var objects;

    objects = node.expressions[0].body.expressions[0].base.objects;
    return objectLiteralMethods(objects);
  };

  getNode = function(node, totalNodes) {
    if (totalNodes == null) {
      totalNodes = 0;
    }
    node.expressions.forEach(function(n) {
      var body, _ref1;

      if ((body = (_ref1 = n.value) != null ? _ref1.body : void 0) != null) {
        getNode(body, totalNodes);
      }
      return totalNodes += 1;
    });
    return totalNodes;
  };

  eachExpression = function(node, cb) {
    return node.expressions.forEach(cb);
  };

  eachProperty = function(node, cb) {
    return node.properties.forEach(cb);
  };

  getMethods = function(node, output) {
    var _ref1, _ref2;

    if (output == null) {
      output = {};
    }
    if ((_ref1 = node.expressions[0]) != null ? (_ref2 = _ref1.body) != null ? _ref2.classBody : void 0 : void 0) {
      return analyzeClass(node);
    } else {
      eachExpression(node, function(exp) {
        var body, end, length, methods, name, objects, start, _ref3, _ref4, _ref5, _ref6, _results;

        if (exp.params != null) {
          start = exp.locationData.first_line;
          end = exp.locationData.last_line;
          anonymousId += 1;
          output["anonymous" + anonymousId] = end - start;
        }
        if (((_ref3 = exp.value) != null ? _ref3.params : void 0) != null) {
          start = exp.value.locationData.first_line;
          end = exp.value.locationData.last_line;
          output[exp.variable.base.value] = end - start;
        }
        if ((body = (_ref4 = exp.value) != null ? _ref4.body : void 0) != null) {
          getMethods(body, output);
        }
        if ((objects = (_ref5 = exp.value) != null ? (_ref6 = _ref5.base) != null ? _ref6.objects : void 0 : void 0)) {
          methods = objectLiteralMethods(objects);
          _results = [];
          for (name in methods) {
            length = methods[name];
            _results.push(output[name] = length);
          }
          return _results;
        }
      });
      return output;
    }
  };

  methods = function(filePath) {
    var file, tree;

    file = fs.readFileSync(filePath, 'utf8').replace(BLANK_LINES, '');
    tree = nodes(file);
    return getMethods(tree);
  };

  churn = function(filePath, cb) {
    return exec("git whatchanged " + filePath + " | grep 'commit' | wc -l", cb);
  };

  countNodes = function(filePath) {
    var tree;

    tree = nodes(fs.readFileSync(filePath, 'utf8'));
    return getNode(tree);
  };

  exports.clog = {
    churn: churn,
    countNodes: countNodes,
    methods: methods,
    run: function() {
      return glob('**/*.coffee', function(err, files) {
        return files.forEach(function(file) {
          return churn(file, function(err, output) {
            return console.log(output);
          });
        });
      });
    }
  };

}).call(this);
